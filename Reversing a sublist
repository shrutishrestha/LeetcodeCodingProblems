from __future__ import print_function


class Node:
  def __init__(self, value, next=None):
    self.value = value
    self.next = next

  def print_list(self):
    temp = self
    while temp is not None:
      print(temp.value, end=" ")
      temp = temp.next
    print()


def reverse_sub_list(head, p, q):
  # like before but head in current, None in previous, start from i=0

  current, previous = head,  None
  #i for looping till p-1, place for prev and current, otherwise head wont shift, keep increasing i
  i=0
  while current is not None and i < p-1:
    previous = current 
    current = current.next
    i+=1

  # after this finishes the value right before p is the previous and last node of sublist is current
  last_node_of_first_part = previous
  last_node_of_sub_list = current

  # next is temp so initializing it
  next = None
  
  #noe again i needs to be from first as i will loop till specific value
  i=0

  # now the value from p to q, change for arrows
  while current is not None and i < q-p+1:
    next = current.next
    current.next = previous
    previous = current
    current = next
    i += 1
  
  #for changing pointers
  if last_node_of_first_part is not None:
    last_node_of_first_part.next = previous
  else:
    head = previous

  #for changing pointers
  last_node_of_sub_list.next = current
  return head
  
  
def main():
  head = Node(1)
  head.next = Node(2)
  head.next.next = Node(3)
  head.next.next.next = Node(4)
  head.next.next.next.next = Node(5)

  print("Nodes of original LinkedList are: ", end='')
  head.print_list()
  result = reverse_sub_list(head, 2, 4)
  print("Nodes of reversed LinkedList are: ", end='')
  result.print_list()


main()
